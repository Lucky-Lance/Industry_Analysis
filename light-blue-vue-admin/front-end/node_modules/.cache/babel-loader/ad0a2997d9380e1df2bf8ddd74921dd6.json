{"remainingRequest":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\src\\components\\Widget\\Widget.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\src\\components\\Widget\\Widget.vue","mtime":1651978576432},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651929515257},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1651929515987},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1651929506653},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651929515257},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1651929516005}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Loader from \"../Loader/Loader\";\nexport default {\n  name: 'Widget',\n  data: function data() {\n    return {\n      state: this.collapsed ? 'collapse' : 'default'\n    };\n  },\n  props: {\n    customHeader: {\n      type: Boolean,\n      default: false\n    },\n    tooltipPlacement: {\n      default: 'top'\n    },\n    showTooltip: {\n      type: Boolean,\n      default: false\n    },\n    close: {\n      type: [Boolean, String],\n      default: false\n    },\n    fullscreen: {\n      type: [Boolean, String],\n      default: false\n    },\n    collapse: {\n      type: [Boolean, String],\n      default: false\n    },\n    settings: {\n      type: [Boolean, String],\n      default: false\n    },\n    settingsInverse: {\n      type: Boolean,\n      default: false\n    },\n    refresh: {\n      type: [Boolean, String],\n      default: false\n    },\n    className: {\n      default: ''\n    },\n    title: {\n      default: ''\n    },\n    customControls: {\n      default: null\n    },\n    bodyClass: {\n      default: ''\n    },\n    options: {\n      default: function _default() {\n        return {};\n      }\n    },\n    fetchingData: {\n      type: Boolean,\n      default: false\n    },\n    showLoader: {\n      type: Boolean,\n      default: true\n    },\n    collapsed: {\n      type: Boolean,\n      default: false\n    },\n    autoload: {\n      type: [Boolean, Number],\n      default: false\n    }\n  },\n  components: {\n    Loader: Loader\n  },\n  computed: {\n    randomId: function randomId() {\n      return Math.floor(Math.random() * 100);\n    },\n    mainControls: function mainControls() {\n      return !!(this.close || this.fullscreen || this.collapse || this.refresh || this.settings || this.settingsInverse);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this.autoload && this.$listeners && this.$listeners.load) {\n      this.loadWidgster();\n\n      if (typeof this.autoload === 'number') {\n        setInterval(function () {\n          _this.loadWidgster();\n        }, this.autoload);\n      }\n    }\n\n    if (this.customControls) {\n      var close = this.$refs.customControlsRef.querySelector('[control=close]');\n      close && close.addEventListener('click', this.closeWidget);\n      var collapse = this.$refs.customControlsRef.querySelector('[control=collapse]');\n      collapse && collapse.addEventListener('click', this.changeState.bind(this, null, 'collapse'));\n      var expand = this.$refs.customControlsRef.querySelector('[control=expand]');\n      expand && expand.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      var fullscreen = this.$refs.customControlsRef.querySelector('[control=fullscreen]');\n      fullscreen && fullscreen.addEventListener('click', this.changeState.bind(this, null, 'fullscreen'));\n      var restore = this.$refs.customControlsRef.querySelector('[control=restore]');\n      restore && restore.addEventListener('click', this.changeState.bind(this, null, 'default'));\n      var load = this.$refs.customControlsRef.querySelector('[control=load]');\n      load && load.addEventListener('click', this.loadWidgster);\n    }\n  },\n  methods: {\n    closeWidget: function closeWidget(e) {\n      var _this2 = this;\n\n      e && e.preventDefault();\n      var $parentEl = this.$el.parentElement;\n      var length = $parentEl.classList.length;\n      var parentToRemove = false;\n\n      for (var i = 0; i < length; i++) {\n        if (/col.*/.test($parentEl.classList[i])) {\n          parentToRemove = true;\n          break;\n        }\n      }\n\n      var removeFunction = function removeFunction() {\n        parentToRemove ? $parentEl.remove() : _this2.$el.remove();\n      };\n\n      if (this.$listeners && this.$listeners.close) {\n        this.$listeners.close(removeFunction.bind(this));\n      } else {\n        removeFunction();\n      }\n    },\n    changeState: function changeState(e, state) {\n      e && e.preventDefault();\n      this.state = state;\n    },\n    loadWidgster: function loadWidgster(e) {\n      e && e.preventDefault();\n      this.$emit('load');\n    }\n  }\n};",null]}