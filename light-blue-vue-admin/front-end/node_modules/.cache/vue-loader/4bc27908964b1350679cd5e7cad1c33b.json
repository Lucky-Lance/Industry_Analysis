{"remainingRequest":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\src\\components\\Widget\\Widget.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\src\\components\\Widget\\Widget.vue","mtime":1651978576432},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651929515257},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1651929515987},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1651929506653},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651929515257},{"path":"C:\\Users\\12779\\Desktop\\Industry_Analysis\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1651929516005}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Loader from '../Loader/Loader';\r\n\r\nexport default {\r\n  name: 'Widget',\r\n  data: function() {\r\n    return {\r\n      state: this.collapsed ? 'collapse' : 'default'\r\n    }\r\n  },\r\n  props: {\r\n    customHeader: { type: Boolean, default: false },\r\n    tooltipPlacement: { default: 'top' },\r\n    showTooltip: { type: Boolean, default: false },\r\n    close: { type: [Boolean, String], default: false },\r\n    fullscreen: { type: [Boolean, String], default: false },\r\n    collapse: { type: [Boolean, String], default: false },\r\n    settings: { type: [Boolean, String], default: false },\r\n    settingsInverse: { type: Boolean, default: false },\r\n    refresh: { type: [Boolean, String], default: false },\r\n    className: { default: '' },\r\n    title: { default: '' },\r\n    customControls: { default: null },\r\n    bodyClass: { default: '' },\r\n    options: { default: () => ({}) },\r\n    fetchingData: {type: Boolean, default: false},\r\n    showLoader: {type: Boolean, default: true},\r\n    collapsed: {type: Boolean, default: false},\r\n    autoload: {type: [Boolean, Number], default: false}\r\n  },\r\n  components: { Loader },\r\n  computed: {\r\n    randomId() {\r\n      return Math.floor(Math.random() * 100);\r\n    },\r\n    mainControls() {\r\n      return !!(this.close || this.fullscreen || this.collapse\r\n        || this.refresh || this.settings || this.settingsInverse);\r\n    },\r\n  },\r\n  mounted() {\r\n    if (this.autoload && this.$listeners && this.$listeners.load) {\r\n      this.loadWidgster();\r\n      if (typeof this.autoload === 'number') {\r\n        setInterval(() => {this.loadWidgster()}, this.autoload);\r\n      }\r\n    }\r\n    if (this.customControls) {\r\n      let close = this.$refs.customControlsRef.querySelector('[control=close]');\r\n      close && close.addEventListener('click', this.closeWidget);\r\n      let collapse = this.$refs.customControlsRef.querySelector('[control=collapse]');\r\n      collapse && collapse.addEventListener('click', this.changeState.bind(this, null, 'collapse'));\r\n      let expand = this.$refs.customControlsRef.querySelector('[control=expand]');\r\n      expand && expand.addEventListener('click', this.changeState.bind(this, null, 'default'));\r\n      let fullscreen = this.$refs.customControlsRef.querySelector('[control=fullscreen]');\r\n      fullscreen && fullscreen.addEventListener('click', this.changeState.bind(this, null, 'fullscreen'));\r\n      let restore = this.$refs.customControlsRef.querySelector('[control=restore]');\r\n      restore && restore.addEventListener('click', this.changeState.bind(this, null, 'default'));\r\n      let load = this.$refs.customControlsRef.querySelector('[control=load]');\r\n      load && load.addEventListener('click', this.loadWidgster);\r\n    }\r\n  },\r\n  methods: {\r\n    closeWidget(e) {\r\n      e && e.preventDefault();\r\n      let $parentEl = this.$el.parentElement;\r\n      let length = $parentEl.classList.length;\r\n      let parentToRemove = false;\r\n      for (let i = 0; i < length; i++) {\r\n        if (/col.*/.test($parentEl.classList[i])) {\r\n          parentToRemove = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let removeFunction = () => {\r\n        parentToRemove ? $parentEl.remove() : this.$el.remove();\r\n      };\r\n\r\n      if (this.$listeners && this.$listeners.close) {\r\n        this.$listeners.close(removeFunction.bind(this));\r\n      } else {\r\n        removeFunction();\r\n      }\r\n    },\r\n    changeState(e, state) {\r\n      e && e.preventDefault();\r\n      this.state = state;\r\n    },\r\n    loadWidgster(e) {\r\n      e && e.preventDefault();\r\n      this.$emit('load');\r\n    }\r\n  }\r\n};\r\n",null]}